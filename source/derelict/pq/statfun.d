/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.pq.statfun;

version(Derelict_Static) version = DerelictPQ_Static;
version(DerelictPQ_Static):

public import derelict.pq.types;

extern(C) @nogc nothrow {
    PGconn* PQconnectStart(const(char)*);
    PGconn* PQconnectStartParams(const(char*)*,const(char*)*,int);
    PostgresPollingStatusType PQconnectPoll(PGconn*);
    PGconn* PQconnectdb(const(char)*);
    PGconn* PQconnectdbParams(const(char*)*,const(char*)*,int);
    PGconn* PQsetdbLogin(const(char)*,const(char)*,const(char)*,const(char)*,const(char)*,const(char)*,const(char)*);
    void PQfinish(PGconn*);
    PQconninfoOption* PQconndefaults();
    PQconninfoOption* PQconninfoParse(const(char)*,char**);
    PQconninfoOption* PQconninfo(PGconn*);
    void PQconninfoFree(PQconninfoOption*);
    int PQresetStart(PGconn*);
    PostgresPollingStatusType PQresetPoll(PGconn*);
    void PQreset(PGconn*);
    PGcancel* PQgetCancel(PGconn*);
    void PQfreeCancel(PGcancel*);
    int PQcancel(PGcancel*,char*,int);
    int PQrequestCancel(PGconn*);
    char* PQdb(const(PGconn)*);
    char* PQuser(const(PGconn)*);
    char* PQpass(const(PGconn)*);
    char* PQhost(const(PGconn)*);
    char* PQport(const(PGconn)*);
    char* PQtty(const(PGconn)*);
    char* PQoptions(const(PGconn)*);
    ConnStatusType PQstatus(const(PGconn)*);
    PGTransactionStatusType PQtransactionStatus(const(PGconn)*);
    char* PQparameterStatus(const(PGconn)*,const(char)*);
    int PQprotocolVersion(const(PGconn)*);
    int PQserverVersion(const(PGconn)*);
    char* PQerrorMessage(const(PGconn)*);
    int PQsocket(const(PGconn)*);
    int PQbackendPID(const(PGconn)*);
    int PQconnectionNeedsPassword(const(PGconn)*);
    int PQconnectionUsedPassword(const(PGconn)*);
    int PQclientEncoding(const(PGconn)*);
    int PQsetClientEncoding(PGconn*,const(char)*);
    int PQsslInUse(PGconn*);
    void* PQsslStruct(PGconn*,const(char)*);
    const(char)* PQsslAttribute(PGconn*,const(char)*);
    const(char*)* PQsslAttributeNames(PGconn*);
    void* PQgetssl(PGconn*);
    void PQinitSSL(int);
    void PQinitOpenSSL(int,int);
    PGVerbosity PQsetErrorVerbosity(PGconn*,PGVerbosity);
    PGContextVisibility PQsetErrorContextVisibility(PGconn*,PGContextVisibility);
    void PQtrace(PGconn*,FILE*);
    void PQuntrace(PGconn*);
    PQnoticeReceiver PQsetNoticeReceiver(PGconn*,PQnoticeReceiver,void*);
    PQnoticeProcessor PQsetNoticeProcessor(PGconn*,PQnoticeProcessor,void*);
    pgthreadlock_t PQregisterThreadLock(pgthreadlock_t);
    PGresult* PQexec(PGconn*,const(char)*);
    PGresult* PQexecParams(PGconn*,const(char)*,int,const(Oid)*,const(ubyte*)*,const(int)*,const int*,int);
    PGresult* PQprepare(PGconn*,const(char)*,const(char)*,int,const(Oid)*);
    PGresult* PQexecPrepared(PGconn*,const(char)*,int,const(char*)*,const(int)*,const(int)*,int);
    int PQsendQuery(PGconn*,const(char)*);
    int PQsendQueryParams(PGconn*,const(char)*,int,const(Oid)*,const(ubyte*)*,const(int)*,const(int)*,int);
    int PQsendPrepare(PGconn*,const(char)*,const(char)*,int,const(Oid)*);
    int PQsendQueryPrepared(PGconn*,const(char)*,int,const(ubyte*)*,const(int)*,const(int)*,int);
    int PQsetSingleRowMode(PGconn*);
    PGresult* PQgetResult(PGconn*);
    int PQisBusy(PGconn*);
    int PQconsumeInput(PGconn*);
    immutable (PGnotify)* PQnotifies(PGconn*);
    int PQputCopyData(PGconn*,const(char)*,int);
    int PQputCopyEnd(PGconn*,const(char)*);
    int PQgetCopyData(PGconn*,char**,int);
    int PQgetline(PGconn*,char*,int);
    int PQputline(PGconn*,const(char)*);
    int PQgetlineAsync(PGconn*,char*,int);
    int PQputnbytes(PGconn*,const(char)*,int);
    int PQendcopy(PGconn*);
    int PQsetnonblocking(PGconn*,int);
    int PQisnonblocking(PGconn*);
    int PQisthreadsafe();
    PGPing PQping(const(char)*);
    PGPing PQpingParams(const(char*)*,const(char*)*,int);
    int PQflush(PGconn*);
    PGresult* PQfn(PGconn*,int,int*,int*,int,PQArgBlock*,int);
    ExecStatusType PQresultStatus(const(PGresult)*);
    char* PQresStatus(ExecStatusType);
    char* PQresultErrorMessage(const(PGresult)*);
    char* PQresultVerboseErrorMessage(const(PGresult)*,PGVerbosity,PGContextVisibility);
    char* PQresultErrorField(const(PGresult)*,int);
    int PQntuples(const(PGresult)*);
    int PQnfields(const(PGresult)*);
    int PQbinaryTuples(const(PGresult)*);
    char* PQfname(const(PGresult)*,int);
    int PQfnumber(const(PGresult)*,const(char)*);
    Oid PQftable(PGresult*,int);
    int PQftablecol(const(PGresult)*,int);
    int PQfformat(const(PGresult)*,int);
    Oid PQftype(const(PGresult)*,int);
    int PQfsize(const(PGresult)*,int);
    int PQfmod(const(PGresult)*,int);
    char* PQcmdStatus(PGresult*);
    char* PQoidStatus(PGresult*);
    Oid PQoidValue(const(PGresult)*);
    char* PQcmdTuples(PGresult*);
    const(ubyte)* PQgetvalue(const(PGresult)*,int,int);
    int PQgetlength(const(PGresult)*,int,int);
    int PQgetisnull(const(PGresult)*,int,int);
    int PQnparams(const(PGresult)*);
    Oid PQparamtype(const(PGresult)*,int);
    PGresult* PQdescribePrepared(PGconn*,const(char)*);
    PGresult* PQdescribePortal(PGconn*,const(char)*);
    int PQsendDescribePrepared(PGconn*,const(char)*);
    int PQsendDescribePortal(PGconn*,const(char)*);
    void PQclear(const(PGresult)*);
    void PQfreemem(void*);
    PGresult* PQmakeEmptyPGresult(PGconn*,ExecStatusType);
    PGresult* PQcopyResult(const(PGresult)*,int);
    int PQsetResultAttrs(PGresult*,int,PGresAttDesc*);
    void* PQresultAlloc(PGresult*,size_t);
    int PQsetvalue(PGresult*,int,int,char*,int);
    size_t PQescapeStringConn(PGconn*,char*,char*,size_t,int*);
    char* PQescapeLiteral(PGconn*,const(char)*,size_t);
    char* PQescapeIdentifier(PGconn*,const(char)*,size_t);
    ubyte* PQescapeByteaConn(PGconn*,ubyte*,size_t,size_t*);
    ubyte* PQunescapeBytea(ubyte*,size_t*);
    size_t PQescapeString(char*,char*,size_t);
    ubyte* PQescapeBytea(ubyte*,size_t,size_t*);
    void PQprint(FILE*,PGresult*,PQprintOpt*);
    void PQdisplayTuples(PGresult*,FILE*,int,char*,int,int);
    void PQprintTuples(PGresult*,FILE*,int,int,int);
    int lo_open(PGconn*,Oid,int);
    int lo_close(PGconn*,int);
    int lo_read(PGconn*,int,char*,size_t);
    int lo_write(PGconn*,int,const(char)*,size_t);
    int lo_lseek(PGconn*,int,int,int);
    pg_int64 lo_lseek64(PGconn*,int,pg_int64,int);
    Oid lo_creat(PGconn*,int);
    Oid lo_create(PGconn*,Oid);
    int lo_tell(PGconn*,int);
    pg_int64 lo_tell64(PGconn*,int);
    int lo_truncate(PGconn*,int,size_t);
    int lo_truncate64(PGconn*,int,pg_int64);
    int lo_unlink(PGconn*,Oid);
    Oid lo_import(PGconn*,const(char)*);
    Oid lo_import_with_oid(PGconn*,const(char)*,Oid);
    int lo_export(PGconn*,Oid,const(char)*);
    int PQlibVersion();
    int PQmblen(char*,int);
    int PQdsplen(char*,int);
    int PQenv2encoding();
    char* PQencryptPassword(char*,char*);
    int pg_char_to_encoding(const(char)*);
    const(char)* pg_encoding_to_char(int);
    int pg_valid_server_encoding_id(int);
    int PQregisterEventProc(PGconn*,PGEventProc,const(char)*,void*);
    int PQsetInstanceData(PGconn*,PGEventProc,void*);
}